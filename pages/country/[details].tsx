import { GetServerSideProps } from "next";
import Head from "next/head";
import React from "react";
import { Country } from "../../utils/data/models/Country";
import {
  toCurrencyList,
  toLanguageList,
  toTranslationList,
} from "../../utils/helpers/Casters";
import Header from "../../components/Header";
import { countryListRaw } from "../../utils/helpers/Constants";

interface CountryDetailsProps {
  country: Country;
}

export const getServerSideProps: GetServerSideProps<
  CountryDetailsProps
> = async (context) => {
  // const json = "../../public/CountryProfileList.json";
  // console.log(context);
  // const countryListRaw: any[] = Array.from(
  //   await import("../../public/CountryProfileList.json"),
  // );
  // console.log(await countryListRaw());

  const target = (await countryListRaw()).find(
    (country) =>
      country.cca2.toLowerCase() ===
      (context.query.details as string).toLowerCase(),
  );
  const countryTarget: Country = {
    ...target,
    name: {
      ...target?.name,
      nativeName: toTranslationList(target?.name.nativeName || {}),
    },
    languages: toLanguageList(target?.languages || {}),
    translations: toTranslationList(target?.translations || {}),
    currencies: toCurrencyList(target?.currencies || {}),
  } as unknown as Country;
  // console.log(countryTarget);

  return {
    props: { country: countryTarget },
    notFound: !!target === false,
  };
};

function Details({ country }: CountryDetailsProps) {
  //   const router = useRouter();
  //   const { country } = router.query;

  // getting name list
  const countryName = country.name;
  const nameList = countryName.nativeName.filter(
    (nameItem) => nameItem.official !== countryName.official,
  );

  // render parts
  const RENDER_FLAG = () => (
    <div className="self-center sm:self-start">
      <img
        className="shadow-lg ring-4 ring-slate-600/30 rounded-lg"
        src={country.flags.png}
      />
    </div>
  );

  const RENDER_NAME = () => (
    <h1 className="text-5xl font-black">{countryName.common}</h1>
  );
  const RENDER_OTHER_NAMES = () => (
    <div className="flex gap-2 flex-wrap">
      <span className="font-bold">Also known as :</span>
      <div className="flex-wrap flex gap-x-1">
        <h2 className="">{countryName.official}</h2>
        {nameList.map((nameItem) => (
          <>
            &mdash;
            <h2 key={nameItem.code} className="">
              {nameItem.official}
            </h2>
          </>
        ))}
      </div>
    </div>
  );

  const RENDER_CAPITALS = () => (
    <div className="flex flex-wrap gap-2">
      <span className="font-bold">
        Capital{country.capital.length > 1 ? "s" : ""} :
      </span>
      {country.capital.map((capital) => (
        <>
          <span key={capital}>{capital}</span>
          <span className="last:hidden">&mdash;</span>
        </>
      ))}
    </div>
  );

  const RENDER_LANGUAGES = () => (
    <div className="flex flex-wrap">
      <span className="font-bold mr-2">
        Language{country.languages.length > 1 ? "s" : ""} spoken :
      </span>
      <span className="">
        {country.languages.map((langItem) => langItem.name).join(" â€” ")}
      </span>
    </div>
  );

  const RENDER_REGIONS = () => (
    <>
      <div>
        <span className="font-bold">Continent :</span>{" "}
        {country.continents.join(", ")}
      </div>
      <div>
        <span className="font-bold">Region :</span> {country.region}
      </div>
      <div>
        <span className="font-bold">Subregion :</span> {country.subregion}
      </div>
    </>
  );

  const RENDER_AREA = () => (
    <div>
      <span className="font-bold">Area size :</span>{" "}
      {country.area.toLocaleString() + " km^2"}
    </div>
  );

  return (
    <>
      <Head>
        <title>{countryName.common}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header />
      <div className="pt-16">
        <div className="p-8 flex gap-8 flex-col sm:flex-row">
          {RENDER_FLAG()}
          <div className="flex-1">
            <div className="grid gap-4">
              {RENDER_NAME()}
              {/* <h2 className="text-3xl font-bold">{cName.official}</h2> */}
              {RENDER_OTHER_NAMES()}
              {RENDER_CAPITALS()}
              {RENDER_LANGUAGES()}
              {RENDER_REGIONS()}
              {RENDER_AREA()}
            </div>
          </div>
        </div>
      </div>
    </>
  );
}

export default Details;
