import { GetServerSideProps } from "next";
import Head from "next/head";
import React, { useEffect } from "react";
import Header from "../../components/Header";
import { getCountry } from "../../utils/apis/CountryApi";
import { useCountryContext } from "../../utils/contexts/country/CountryHook";
import { toCountry } from "../../utils/helpers/Casters";
import { APP_NAME } from "../../utils/helpers/Constants";

interface CountryDetailsProps {
  countryStr: string;
}

export const getServerSideProps: GetServerSideProps<
  CountryDetailsProps
> = async (context) => {
  // const json = "../../public/CountryProfileList.json";
  // console.log(context);
  // const countryListRaw: any[] = Array.from(
  //   await import("../../public/CountryProfileList.json"),
  // );
  // console.log(await countryListRaw());

  const target = JSON.stringify(
    await getCountry((context.query.details + "").toLowerCase()),
  );
  // const countryTarget: Country = toCountry(target);
  // console.log(countryTarget);

  return {
    props: { countryStr: target },
    notFound: !target,
  };
};

function Details({ countryStr }: CountryDetailsProps) {
  //   const router = useRouter();
  //   const { country } = router.query;
  // console.log(country.name.nativeName);
  // console.log(country.languages);
  // getting name list
  const country = toCountry(JSON.parse(countryStr)[0]);
  const countryName = country.name;
  const nameList = countryName.nativeName.filter(
    (nameItem) => nameItem.official !== countryName.official,
  );

  // console.log(
  //   ["US", "USA", "United States of America"]
  //     .map((e) => e.toLowerCase())
  //     .includes("US".toLowerCase()),
  // );

  const { state: countryState, action: countryAction } = useCountryContext();
  useEffect(() => {
    countryAction.setSearchKeyword("");
  }, []);

  // render parts
  const RENDER_FLAG = () => (
    <div className="self-center flex flex-col justify-center gap-4">
      <h1 className="text-4xl font-bold">{country.name.common}</h1>
      <img
        className="rounded-lg shadow-lg ring-4 ring-slate-600/30"
        src={country.flags.png}
      />
    </div>
  );

  const RENDER_NAME = () => (
    <h1 className="text-5xl font-black">
      {countryName.common} {country.flag}
    </h1>
  );
  const RENDER_OTHER_NAMES = () => (
    <div className="flex flex-wrap gap-2">
      <span className="font-bold">Also known as :</span>
      <div className="flex flex-wrap gap-x-1">
        {/* <h2 className="">{countryName.official}</h2> */}
        {/* {nameList.map((nameItem) => (
          <>
            &mdash;
            <h2 key={nameItem.code} className="">
              {nameItem.official}
            </h2>
          </>
        ))} */}
        {[
          countryName.official,
          ...nameList.map((nameItem) => nameItem.official),
        ].join(" — ")}
      </div>
    </div>
  );

  const RENDER_CAPITALS = () =>
    country.capital && (
      <div className="flex flex-wrap gap-2">
        <span className="font-bold">
          Capital{country.capital.length > 1 ? "s" : ""} :
        </span>
        {country.capital.map((capital) => (
          <>
            <span key={capital}>{capital}</span>
            <span className="last:hidden">&mdash;</span>
          </>
        ))}
      </div>
    );

  const RENDER_LANGUAGES = () => (
    <div className="flex flex-wrap">
      <span className="mr-2 font-bold">
        Language{country.languages.length > 1 ? "s" : ""} spoken :
      </span>
      <span className="">
        {country.languages.map((langItem) => langItem.name).join(" — ")}
      </span>
    </div>
  );

  const RENDER_REGIONS = () => (
    <>
      <div>
        <span className="font-bold">Continent :</span>{" "}
        {country.continents.join(", ")}
      </div>
      <div>
        <span className="font-bold">Region :</span> {country.region}
      </div>
      {country.subregion && (
        <div>
          <span className="font-bold">Subregion :</span> {country.subregion}
        </div>
      )}
    </>
  );

  const RENDER_AREA = () => (
    <div>
      <span className="font-bold">Area size :</span>{" "}
      {country.area.toLocaleString() + " km^2"}
    </div>
  );

  const RENDER_CURRENCIES = () =>
    country.currencies[0] && (
      <div className="flex flex-wrap">
        <span className="mr-2 font-bold">
          Currenc{country.currencies.length > 1 ? "ies" : "y"} :
        </span>
        <span className="">
          {country.currencies.map(
            (currItem) =>
              `${currItem.name} (${currItem.code} / ${currItem.symbol})`,
          )}
        </span>
      </div>
    );

  return (
    <>
      <Head>
        <title>
          {countryName.common} | {APP_NAME}
        </title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header />
      <div className="pt-16">
        <img
          className="absolute inset-0 h-[30rem] rounded-br-full rounded-r-3xl
          opacity-40  blur-lg transition-all group-hover:scale-150 -z-[1]"
          src={country.flags.png}
          alt={country.name.common}
        />
        <div className="flex flex-col content-evenly justify-evenly gap-8 p-8 sm:flex-row flex-wrap">
          {RENDER_FLAG()}
          {/* <div className="">
            <div className="grid gap-4">
              {RENDER_NAME()}
              {RENDER_OTHER_NAMES()}
              {RENDER_CAPITALS()}
              {RENDER_LANGUAGES()}
              {RENDER_REGIONS()}
              {RENDER_AREA()}
              {RENDER_CURRENCIES()}
            </div>
          </div> */}
          <div className="">
            <div className="flex flex-col gap-4">
              <h1 className="text-2xl font-bold">Naming</h1>
              <div className="flex flex-col">
                <span>Common : {country.name.common} </span>
                <span>Official : {country.name.official} </span>
                <span>
                  Native name :{" "}
                  {[
                    countryName.official,
                    ...nameList.map((nameItem) => nameItem.official),
                  ].join(" — ")}{" "}
                </span>
                <span>
                  Alternative Spellings: {country.altSpellings.join(", ")}{" "}
                </span>
                <span>
                  Name in other languages : {country.translations.length}
                </span>
              </div>
            </div>
          </div>
          <div className="">
            <div className="flex flex-col gap-4">
              <h1 className="text-2xl font-bold">Geographic</h1>
              <div className="flex flex-col">
                <span>Continent : {country.continents.join(", ")} </span>
                <span>Region : {country.region} </span>
                <span>Subregion : {country.subregion} </span>
                <span>Land area : {country.area.toLocaleString()} km^2</span>
                <span>Landlocked : {country.landlocked ? "YES" : "NO"} </span>
                <span>Borders : {country.borders?.join(", ")}</span>
                <span>Lat-Long : {country.latlng.join(", ")}</span>
              </div>
            </div>
          </div>
          <div className="">
            <div className="flex flex-col gap-4">
              <h1 className="text-2xl font-bold">Politic</h1>
              <div className="flex flex-col">
                <span>Independent : {country.independent ? "YES" : "NO"} </span>
                <span>Status : {country.status.toUpperCase()} </span>
                <span>
                  United Nations member : {country.unMember ? "YES" : "NO"}{" "}
                </span>
              </div>
            </div>
          </div>
          <div className="">
            <div className="flex flex-col gap-4">
              <h1 className="text-2xl font-bold">Generic</h1>
              <div className="flex flex-col">
                <span>Capital : {country.capital} </span>
                <span>
                  Currency :{" "}
                  {country.currencies
                    ?.map(
                      (currItem) =>
                        `${currItem.name} (${currItem.code} / ${currItem.symbol})`,
                    )
                    .join(" — ")}
                </span>
                <span>Population : {country.population.toLocaleString()} </span>
                <span className="capitalize">
                  Start of the week : {country.startOfWeek}{" "}
                </span>
              </div>
            </div>
          </div>
          <div className="">
            <div className="flex flex-col gap-4">
              <h1 className="text-2xl font-bold">Communication</h1>
              <div className="flex flex-col">
                <span>
                  Language(s) :{" "}
                  {country.languages.map((e) => e.name).join(", ")}
                </span>
                <span>
                  International direct dialing (IDD):{" "}
                  {`${country.idd.root}${country.idd.suffixes[0]}`}
                </span>
                <span>Top level domain : {country.tld.join(" — ")} </span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </>
  );
}

export default Details;
